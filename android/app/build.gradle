apply plugin: 'com.android.application'

android {
    namespace "com.alienpass.app"
    compileSdk rootProject.ext.compileSdkVersion
    // Load keystore properties if present (for signing release builds)
    def keystorePropertiesFile = rootProject.file('keystore.properties')
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    defaultConfig {
        applicationId "com.alienpass.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            if (keystoreProperties['storeFile']) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                enableV3Signing true
                enableV4Signing true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Sign release if properties are provided
            if (project.hasProperty('android.injected.signing.store.file') || keystoreProperties['storeFile']) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    google()
    mavenCentral()
    def cordovaLibs = file('../capacitor-cordova-android-plugins/src/main/libs')
    if (cordovaLibs.exists()) {
        flatDir {
            dirs cordovaLibs, 'libs'
        }
    } else {
        // Fall back to local libs only if present
        def localLibs = file('libs')
        if (localLibs.exists()) {
            flatDir { dirs 'libs' }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    if (findProject(':capacitor-cordova-android-plugins') != null) {
        implementation project(':capacitor-cordova-android-plugins')
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
